---
controller:
  name: controller
  kind: deployment

  selectorLabels: {}
  annotations: {}
  nginxplus: true

  mgmt:
    licenseTokenSecretName: "license-token"
    sslVerify: false

  nginxReloadTimeout: 60000

  appprotect:
    enable: true
    v5: true
    volumes:
      - name: app-protect-bd-config
        emptyDir: {}
      - name: app-protect-config
        emptyDir: {}
      - name: app-protect-bundles
        emptyDir: {}
    volumeMounts:
      - name: app-protect-bd-config
        mountPath: /etc/app_protect/bd-config
      - name: app-protect-config
        mountPath: /etc/app_protect/config
      - name: app-protect-bundles
        mountPath: /etc/app_protect/bundles
    
    enforcer:
      host: "127.0.0.1"
      port: 50000
      image:
        repository: private-registry.nginx.com/nap/waf-enforcer
        tag: "5.4.0"
        pullPolicy: IfNotPresent
      securityContext: 
        readOnlyRootFilesystem: true

    configManager:
      image:
        repository: private-registry.nginx.com/nap/waf-config-mgr
        tag: "5.4.0"
        pullPolicy: IfNotPresent
      securityContext:
        readOnlyRootFilesystem: true
        allowPrivilegeEscalation: false
        runAsUser: 101
        runAsNonRoot: true
        capabilities:
          drop:
            - all

  appprotectdos:
    enable: true
    debug: false
    maxWorkers: 0
    maxDaemons: 0
    memory: 0

  hostNetwork: false
  hostPort:
    enable: false
    http: 80
    https: 443

  containerPort:
    http: 80
    https: 443

  dnsPolicy: ClusterFirst
  nginxDebug: false
  logLevel: 2
  logFormat: json
  customPorts: []

  image:
    repository: private-registry.nginx.com/nginx-ic-dos/nginx-plus-ingress
    tag: "4.0.1"
    pullPolicy: IfNotPresent

  config:
    annotations: {}
    entries:
      error-log-level: debug

  defaultTLS:
    cert: ""
    key: ""
    secret: ""

  wildcardTLS:
    cert: ""
    key: ""
    secret: ""

  terminationGracePeriodSeconds: 30
  autoscaling:
    enabled: false
    annotations: {}
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 50
    targetMemoryUtilizationPercentage: 50
    behavior: {}

  resources:
    requests:
      cpu: 100m
      memory: 128Mi

  podSecurityContext:
    seccompProfile:
      type: RuntimeDefault

  securityContext:
    allowPrivilegeEscalation: true
    readOnlyRootFilesystem: true
    runAsUser: 0

  initContainerSecurityContext: {}
  initContainerResources:
    requests:
      cpu: 100m
      memory: 128Mi

  tolerations: []
  affinity: {}
  env: []
  volumes: []
  volumeMounts: []
  initContainers: []
  minReadySeconds: 0
  podDisruptionBudget:
    enabled: false
    annotations: {}
  strategy: {}
  extraContainers: []
  replicaCount: 1
  ingressClass:
    name: nginx
    create: true
    setAsDefaultIngress: false
  watchNamespace: ""
  watchNamespaceLabel: ""
  watchSecretNamespace: ""
  enableCustomResources: true
  enableOIDC: true
  enableTLSPassthrough: false
  tlsPassthroughPort: 443
  enableCertManager: false
  enableExternalDNS: true
  globalConfiguration:
    create: false
    spec: {}
  enableSnippets: true
  healthStatus: false
  healthStatusURI: "/nginx-health"
  nginxStatus:
    enable: true
    port: 8080
    allowCidrs: "127.0.0.1"
  service:
    create: true
    type: LoadBalancer
    externalTrafficPolicy: Local
    annotations: {}
    extraLabels: {}
    loadBalancerIP: ""
    clusterIP: ""
    externalIPs: []
    loadBalancerSourceRanges: []
    httpPort:
      enable: true
      port: 80
      targetPort: 80
    httpsPort:
      enable: true
      port: 443
      targetPort: 443
    customPorts: []
  serviceAccount:
    annotations: {}
    imagePullSecretName: ""
    imagePullSecretsNames: []
  reportIngressStatus:
    enable: true
    ingressLink: ""
    enableLeaderElection: true
    leaderElectionLockName: ""
    annotations: {}
  pod:
    annotations: {}
    extraLabels: {}
  readyStatus:
    enable: true
    port: 8081
    initialDelaySeconds: 0
  enableLatencyMetrics: false
  disableIPV6: false
  defaultHTTPListenerPort: 80
  defaultHTTPSListenerPort: 443
  readOnlyRootFilesystem: false
  enableSSLDynamicReload: true
  telemetryReporting:
    enable: true
  enableWeightChangesDynamicReload: false

rbac:
  create: true
  clusterrole:
    create: true

prometheus:
  create: true
  port: 9113
  secret: ""
  scheme: http
  service:
    create: false
    labels:
      service: "nginx-ingress-prometheus-service"
  serviceMonitor:
    create: false
    labels: {}
    selectorMatchLabels:
      service: "nginx-ingress-prometheus-service"
    endpoints:
      - port: prometheus

serviceInsight:
  create: false
  port: 9114
  secret: ""
  scheme: http

nginxAgent:
  enable: false
  instanceGroup: ""
  logLevel: "error"
  syslog:
    host: "127.0.0.1"
    port: 1514
  napMonitoring:
    collectorBufferSize: 50000
    processorBufferSize: 50000
  instanceManager:
    host: ""
    grpcPort: 443
    sni: ""
    tls:
      enabled: true
      skipVerify: false
      secret: ""
      caSecret: ""
  customConfigMap: ""



