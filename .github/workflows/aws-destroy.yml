name: "NGINX V5-NIC/NAP Destroy"
on:
  push:
    branches:
      - destroy-nap
  pull_request:
env:
  AWS_REGION: us-east-1
jobs:
  terraform_arcadia:
    name: "Destroy Arcadia WebApp"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./arcadia
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan (Destroy)
        if: github.event_name == 'pull_request' || github.event_name == 'push'
        run: |
          terraform plan -destroy -no-color -input=false -lock=false -out=tfplan
          terraform show -no-color tfplan > plan.txt

      - name: Check Changes
        id: check_changes
        run: |
          if grep -q "No changes." plan.txt; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Destroy
        if: github.event_name == 'push' && github.ref == 'refs/heads/destroy-nap' && steps.check_changes.outputs.has_changes == 'true'
        run: terraform destroy -auto-approve -lock=false -input=false

  terraform_policy:
    name: "Destroy NGINX Policy"
    runs-on: ubuntu-latest
    needs: terraform_arcadia
    defaults:
      run:
        working-directory: ./policy
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init

      - name: Terraform Destroy
        run: terraform destroy -auto-approve -lock=false

  terraform_nap:
    name: "Destroy NGINX NIC/App Protect"
    runs-on: ubuntu-latest
    needs: terraform_policy
    defaults:
      run:
        working-directory: ./nap
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan (Destroy)
        run: |
          terraform plan -destroy -no-color -input=false -lock=false -out=tfplan \
            -var="workspace_path=${{ env.WORKSPACE_PATH }}" \
            -var="nginx_jwt=${{ secrets.NGINX_JWT }}" \
            -var="nginx_pwd=none"
        env:
          WORKSPACE_PATH: "./nap"
 
      - name: Check Changes
        id: check_changes
        run: |
          if grep -q "No changes." plan.txt; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Destroy
        if: github.event_name == 'push' && github.ref == 'refs/heads/destroy-nap' && steps.check_changes.outputs.has_changes == 'true'
        run: |
          terraform destroy -auto-approve -input=false -lock=false \
            -var="workspace_path=${{ env.WORKSPACE_PATH }}" \
            -var="nginx_jwt=${{ secrets.NGINX_JWT }}" \
            -var="nginx_pwd=none"
        env:
          WORKSPACE_PATH: "./nap"

  terraform_eks:
    name: "Destroy AWS EKS"
    runs-on: ubuntu-latest
    needs: terraform_nap
    defaults:
      run:
        working-directory: ./eks-cluster
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan (Destroy)
        if: github.event_name == 'pull_request' || github.event_name == 'push'
        run: |
          terraform plan -destroy -no-color -input=false -out=tfplan -lock=false
          terraform show -no-color tfplan > plan.txt

      - name: Check Changes
        id: check_changes
        run: |
          if grep -q "No changes." plan.txt; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Destroy
        if: github.event_name == 'push' && github.ref == 'refs/heads/destroy-nap' && steps.check_changes.outputs.has_changes == 'true'
        run: terraform destroy -auto-approve -input=false -lock=false

  terraform_infra:
    name: "Destroy AWS Infra"
    runs-on: ubuntu-latest
    needs: terraform_eks
    defaults:
      run:
        working-directory: ./infra
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan (Destroy)
        if: github.event_name == 'pull_request' || github.event_name == 'push'
        run: |
          terraform plan -destroy -no-color -input=false -out=tfplan -lock=false
          terraform show -no-color tfplan > plan.txt

      - name: Check Changes
        id: check_changes
        run: |
          if grep -q "No changes." plan.txt; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Destroy
        if: github.event_name == 'push' && github.ref == 'refs/heads/destroy-nap' && steps.check_changes.outputs.has_changes == 'true'
        run: terraform destroy -auto-approve -input=false -lock=false

  
  terraform_S3:
   name: "Destroy S3/DynamoDB/IAM"
   needs: terraform_infra
   runs-on: ubuntu-latest
   defaults:
    run:
      working-directory: ./s3
   steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Initialize Terraform
      run: terraform init

    - name: Set Bucket Name
      id: set_bucket
      run: |
        BUCKET_NAME="akash-terraform-state-bucket"
        echo "bucket_name=${BUCKET_NAME}" >> $GITHUB_OUTPUT
        echo "Using bucket: ${BUCKET_NAME}"

    - name: Delete S3 Bucket Contents
      run: |
        BUCKET_NAME="${{ steps.set_bucket.outputs.bucket_name }}"
        
        # First delete all object versions
        echo "🧹 Deleting all object versions..."
        aws s3api delete-objects --bucket "$BUCKET_NAME" \
          --delete "$(aws s3api list-object-versions \
          --bucket "$BUCKET_NAME" \
          --query '{Objects: Versions[].{Key:Key,VersionId:VersionId}}' \
          --output json)" 2>/dev/null || true
        
        # Then delete all delete markers
        echo "🧹 Deleting all delete markers..."
        aws sapi delete-objects --bucket "$BUCKET_NAME" \
          --delete "$(aws s3api list-object-versions \
          --bucket "$BUCKET_NAME" \
          --query '{Objects: DeleteMarkers[].{Key:Key,VersionId:VersionId}}' \
          --output json)" 2>/dev/null || true
        
        # Finally delete any remaining objects
        echo "🧹 Deleting remaining objects..."
        aws s3 rm "s3://$BUCKET_NAME" --recursive || true

    - name: Delete S3 Bucket
      run: |
        BUCKET_NAME="${{ steps.set_bucket.outputs.bucket_name }}"
        echo "💥 Deleting bucket: $BUCKET_NAME"
        aws s3api delete-bucket --bucket "$BUCKET_NAME" || true

    - name: Delete DynamoDB Table
      run: |
        TABLE_NAME="terraform-lock-table"
        echo "💥 Deleting table: $TABLE_NAME"
        aws dynamodb delete-table --table-name "$TABLE_NAME" || true

    - name: Clean Up IAM Resources
      run: |
        # Delete policy
        POLICY_ARN=$(aws iam list-policies --query "Policies[?PolicyName=='TerraformStateAccess'].Arn" --output text)
        if [ -n "$POLICY_ARN" ]; then
          echo "🔗 Detaching policy from roles..."
          ATTACHED_ROLES=$(aws iam list-entities-for-policy --policy-arn $POLICY_ARN --query "PolicyRoles[].RoleName" --output text)
          for ROLE in $ATTACHED_ROLES; do
            aws iam detach-role-policy --role-name $ROLE --policy-arn $POLICY_ARN || true
          done
          
          echo "🗑️ Deleting policy..."
          aws iam delete-policy --policy-arn $POLICY_ARN || true
        fi

        # Delete role
        ROLE_NAME="TerraformCIExecutionRole"
        if aws iam get-role --role-name $ROLE_NAME 2>/dev/null; then
          echo "🗑️ Deleting role..."
          aws iam delete-role --role-name $ROLE_NAME || true
        fi

    - name: Verify Deletion
      run: |
        echo "✅ Verification:"
        
        # Verify S3 bucket
        BUCKET_NAME="${{ steps.set_bucket.outputs.bucket_name }}"
        if aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
          echo "::error::Bucket $BUCKET_NAME still exists!"
        else
          echo "Bucket $BUCKET_NAME deleted successfully"
        fi
        
        # Verify DynamoDB table
        TABLE_NAME="terraform-lock-table"
        if aws dynamodb describe-table --table-name "$TABLE_NAME" 2>/dev/null; then
          echo "::error::Table $TABLE_NAME still exists!"
        else
          echo "Table $TABLE_NAME deleted successfully"
        fi
        
        # Verify IAM resources
        if aws iam get-policy --policy-arn "arn:aws:iam::$(aws sts get-caller-identity --query Account --output text):policy/TerraformStateAccess" 2>/dev/null; then
          echo "::error::IAM Policy still exists!"
        else
          echo "IAM Policy deleted successfully"
        fi
        
        if aws iam get-role --role-name "TerraformCIExecutionRole" 2>/dev/null; then
          echo "::error::IAM Role still exists!"
        else
          echo "IAM Role deleted successfully"
        fi
