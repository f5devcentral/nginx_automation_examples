name: "NGINX V5-NIC/NAP Destroy"
on:
  push:
    branches:
      - destroy-nap
  pull_request:
env:
  AWS_REGION: us-east-1
jobs:
  terraform_arcadia:
    name: "Destroy Arcadia WebApp"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./arcadia
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan (Destroy)
        if: github.event_name == 'pull_request' || github.event_name == 'push'
        run: |
          terraform plan -destroy -no-color -input=false -out=tfplan
          terraform show -no-color tfplan > plan.txt

      - name: Check Changes
        id: check_changes
        run: |
          if grep -q "No changes." plan.txt; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Destroy
        if: github.event_name == 'push' && github.ref == 'refs/heads/destroy-nap' && steps.check_changes.outputs.has_changes == 'true'
        run: terraform destroy -auto-approve -input=false

  terraform_policy:
    name: "Destroy NGINX Policy"
    runs-on: ubuntu-latest
    needs: terraform_arcadia
    defaults:
      run:
        working-directory: ./policy
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init

      - name: Terraform Destroy
        run: terraform destroy -auto-approve


  terraform_nap:
    name: "Destroy NGINX NIC/App Protect"
    runs-on: ubuntu-latest
    needs: terraform_policy
    defaults:
     run:
      working-directory: ./nap
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
         aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan (Destroy)
        run: |
          terraform plan -destroy -no-color -input=false -lock=false -out=tfplan -lock=false \
          -var="workspace_path=${{ env.WORKSPACE_PATH }}" \
          -var="nginx_jwt=${{ secrets.NGINX_JWT }}" \
          -var="nginx_pwd=none"
        env:
         WORKSPACE_PATH: "./nap"
 
      - name: Check Changes
        id: check_changes
        run: |
          if grep -q "No changes." plan.txt; then
           echo "has_changes=false" >> $GITHUB_OUTPUT
          else
           echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Destroy
        if: github.event_name == 'push' && github.ref == 'refs/heads/destroy-nap' && steps.check_changes.outputs.has_changes == 'true'
        run: |
          terraform destroy -auto-approve -input=false -lock=false \
            -var="workspace_path=${{ env.WORKSPACE_PATH }}" \
            -var="nginx_jwt=${{ secrets.NGINX_JWT }}" \
            -var="nginx_pwd=none"
        env:
            WORKSPACE_PATH: "./nap"

  terraform_eks:
    name: "Destroy AWS EKS"
    runs-on: ubuntu-latest
    needs: terraform_nap
    defaults:
      run:
        working-directory: ./eks-cluster
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan (Destroy)
      if: github.event_name == 'pull_request' || github.event_name == 'push'
      run: |
        terraform plan -destroy -no-color -input=false -out=tfplan -lock=false
        terraform show -no-color tfplan > plan.txt

    - name: Check Changes
      id: check_changes
      run: |
        if grep -q "No changes." plan.txt; then
          echo "has_changes=false" >> $GITHUB_OUTPUT
        else
          echo "has_changes=true" >> $GITHUB_OUTPUT
        fi

    - name: Terraform Destroy
      if: github.event_name == 'push' && github.ref == 'refs/heads/destroy-nap' && steps.check_changes.outputs.has_changes == 'true'
      run: terraform destroy -auto-approve -input=false -lock=false

  terraform_infra:
    name: "Destroy AWS Infra"
    runs-on: ubuntu-latest
    needs: terraform_eks
    defaults:
      run:
        working-directory: ./infra
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan (Destroy)
      if: github.event_name == 'pull_request' || github.event_name == 'push'
      run: |
        terraform plan -destroy -no-color -input=false -out=tfplan -lock=false
        terraform show -no-color tfplan > plan.txt

    - name: Check Changes
      id: check_changes
      run: |
        if grep -q "No changes." plan.txt; then
          echo "has_changes=false" >> $GITHUB_OUTPUT
        else
          echo "has_changes=true" >> $GITHUB_OUTPUT
        fi

    - name: Terraform Destroy
      if: github.event_name == 'push' && github.ref == 'refs/heads/destroy-nap' && steps.check_changes.outputs.has_changes == 'true'
      run: terraform destroy -auto-approve -input=false -lock=false
   
  terraform_S3:
    name: "Dynamic AWS Cleanup"
    needs: terraform_infra
    runs-on: ubuntu-latest
    defaults:
     run:
      working-directory: ./s3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
         aws-region: ${{ env.AWS_REGION }}

      - name: Extract Resource Names from Terraform
        id: extract_names
        run: |
         # Extract S3 bucket name from Terraform files
         BUCKET_NAME=$(grep -o 'bucket\s*=\s*".*"' *.tf | head -1 | cut -d'"' -f2)
         echo "bucket_name=${BUCKET_NAME}" >> $GITHUB_OUTPUT
      
         # Extract DynamoDB table name from Terraform files
         TABLE_NAME=$(grep -o 'name\s*=\s*".*"' *.tf | head -1 | cut -d'"' -f2)
         echo "table_name=${TABLE_NAME}" >> $GITHUB_OUTPUT
      
         echo "Extracted bucket: ${BUCKET_NAME}"
         echo "Extracted table: ${TABLE_NAME}"

      - name: Delete Resources
        run: |
          # Delete S3 bucket if found
          if [[ -n "${{ steps.extract_names.outputs.bucket_name }}" ]]; then
             echo "🧹 Emptying bucket: ${{ steps.extract_names.outputs.bucket_name }}"
             aws s3 rm "s3://${{ steps.extract_names.outputs.bucket_name }}" --recursive --quiet || true
    
             echo "💥 Deleting bucket: ${{ steps.extract_names.outputs.bucket_name }}"
             aws s3api delete-bucket --bucket "${{ steps.extract_names.outputs.bucket_name }}" || true
          else
             echo "ℹ️ No bucket name found in Terraform config"
          fi

           # Delete DynamoDB table if found
           if [[ -n "${{ steps.extract_names.outputs.table_name }}" ]]; then
              echo "💥 Deleting table: ${{ steps.extract_names.outputs.table_name }}"
              aws dynamodb delete-table --table-name "${{ steps.extract_names.outputs.table_name }}" || true
           else
             echo "ℹ️ No table name found in Terraform config"
           fi

        - name: Verify Cleanup
          run: |
           echo "✅ Verification:"
           if [[ -n "${{ steps.extract_names.outputs.bucket_name }}" ]]; then
              echo "Bucket deletion status:"
              aws s3api head-bucket --bucket "${{ steps.extract_names.outputs.bucket_name }}" 2>&1 || echo "Bucket deleted"
           fi
      
           if [[ -n "${{ steps.extract_names.outputs.table_name }}" ]]; then
              echo "Table deletion status:"
              aws dynamodb describe-table --table-name "${{ steps.extract_names.outputs.table_name }}" 2>&1 || echo "Table deleted"
           fi