name: "NGINX V5-NIC/NAP Destroy"
on:
  push:
    branches:
      - destroy-nap
  pull_request:
env:
  AWS_REGION: us-east-1
jobs:
  terraform_arcadia:
    name: "Destroy Arcadia WebApp"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./arcadia
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan (Destroy)
        if: github.event_name == 'pull_request' || github.event_name == 'push'
        run: |
          terraform plan -destroy -no-color -input=false -out=tfplan
          terraform show -no-color tfplan > plan.txt

      - name: Check Changes
        id: check_changes
        run: |
          if grep -q "No changes." plan.txt; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Destroy
        if: github.event_name == 'push' && github.ref == 'refs/heads/destroy-nap' && steps.check_changes.outputs.has_changes == 'true'
        run: terraform destroy -auto-approve -input=false

  terraform_policy:
    name: "Destroy NGINX Policy"
    runs-on: ubuntu-latest
    needs: terraform_arcadia
    defaults:
      run:
        working-directory: ./policy
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init

      - name: Terraform Destroy
        run: terraform destroy -auto-approve


  terraform_nap:
    name: "Destroy NGINX NIC/App Protect"
    runs-on: ubuntu-latest
    needs: terraform_policy
    defaults:
     run:
      working-directory: ./nap
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
         aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan (Destroy)
        run: |
          terraform plan -destroy -no-color -input=false -lock=false -out=tfplan -lock=false \
          -var="workspace_path=${{ env.WORKSPACE_PATH }}" \
          -var="nginx_jwt=${{ secrets.NGINX_JWT }}" \
          -var="nginx_pwd=none"
        env:
         WORKSPACE_PATH: "./nap"
 
      - name: Check Changes
        id: check_changes
        run: |
          if grep -q "No changes." plan.txt; then
           echo "has_changes=false" >> $GITHUB_OUTPUT
          else
           echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Destroy
        if: github.event_name == 'push' && github.ref == 'refs/heads/destroy-nap' && steps.check_changes.outputs.has_changes == 'true'
        run: |
          terraform destroy -auto-approve -input=false -lock=false \
            -var="workspace_path=${{ env.WORKSPACE_PATH }}" \
            -var="nginx_jwt=${{ secrets.NGINX_JWT }}" \
            -var="nginx_pwd=none"
        env:
            WORKSPACE_PATH: "./nap"

  terraform_eks:
    name: "Destroy AWS EKS"
    runs-on: ubuntu-latest
    needs: terraform_nap
    defaults:
      run:
        working-directory: ./eks-cluster
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan (Destroy)
      if: github.event_name == 'pull_request' || github.event_name == 'push'
      run: |
        terraform plan -destroy -no-color -input=false -out=tfplan -lock=false
        terraform show -no-color tfplan > plan.txt

    - name: Check Changes
      id: check_changes
      run: |
        if grep -q "No changes." plan.txt; then
          echo "has_changes=false" >> $GITHUB_OUTPUT
        else
          echo "has_changes=true" >> $GITHUB_OUTPUT
        fi

    - name: Terraform Destroy
      if: github.event_name == 'push' && github.ref == 'refs/heads/destroy-nap' && steps.check_changes.outputs.has_changes == 'true'
      run: terraform destroy -auto-approve -input=false -lock=false

  terraform_infra:
    name: "Destroy AWS Infra"
    runs-on: ubuntu-latest
    needs: terraform_eks
    defaults:
      run:
        working-directory: ./infra
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan (Destroy)
      if: github.event_name == 'pull_request' || github.event_name == 'push'
      run: |
        terraform plan -destroy -no-color -input=false -out=tfplan -lock=false
        terraform show -no-color tfplan > plan.txt

    - name: Check Changes
      id: check_changes
      run: |
        if grep -q "No changes." plan.txt; then
          echo "has_changes=false" >> $GITHUB_OUTPUT
        else
          echo "has_changes=true" >> $GITHUB_OUTPUT
        fi

    - name: Terraform Destroy
      if: github.event_name == 'push' && github.ref == 'refs/heads/destroy-nap' && steps.check_changes.outputs.has_changes == 'true'
      run: terraform destroy -auto-approve -input=false -lock=false
   
  terraform_S3:
    name: "Destroy S3/DynamoDB"
    needs: terraform_infra
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./s3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Initialize Terraform
      run: terraform init

    - name: Get Resource Names from Outputs
      id: get_resources
      run: |
        # Get S3 bucket name if it exists
        if terraform output -raw s3_bucket_created | grep -q 'true'; then
          BUCKET_NAME=$(terraform output -raw s3_bucket_name)
          echo "bucket_name=${BUCKET_NAME}" >> $GITHUB_OUTPUT
        fi

        # Get DynamoDB table name if it exists
        if terraform output -raw dynamodb_table_created | grep -q 'true'; then
          TABLE_NAME=$(terraform output -raw dynamodb_table_name)
          echo "table_name=${TABLE_NAME}" >> $GITHUB_OUTPUT
        fi

        # Get IAM role/policy names if they exist
        if terraform output -raw iam_role_created | grep -q 'true'; then
          ROLE_NAME=$(terraform output -raw iam_role_name)
          echo "role_name=${ROLE_NAME}" >> $GITHUB_OUTPUT
        fi

        if terraform output -raw iam_policy_created | grep -q 'true'; then
          POLICY_NAME=$(terraform output -raw iam_policy_name)
          echo "policy_name=${POLICY_NAME}" >> $GITHUB_OUTPUT
          POLICY_ARN=$(aws iam list-policies --query "Policies[?PolicyName=='${POLICY_NAME}'].Arn" --output text)
          echo "policy_arn=${POLICY_ARN}" >> $GITHUB_OUTPUT
        fi

    - name: Empty and Delete Resources
      run: |
        # Delete S3 bucket contents if it exists
        if [[ -n "${{ steps.get_resources.outputs.bucket_name }}" ]]; then
          echo "Emptying S3 bucket: ${{ steps.get_resources.outputs.bucket_name }}"
        
        # Delete all object versions
        aws s3api delete-objects --bucket ${{ steps.get_resources.outputs.bucket_name }} \
          --delete "$(aws s3api list-object-versions \
          --bucket ${{ steps.get_resources.outputs.bucket_name }} \
          --query '{Objects: Versions[].{Key:Key,VersionId:VersionId}}')" 2>/dev/null || true
        
        # Delete all delete markers
        aws s3api delete-objects --bucket ${{ steps.get_resources.outputs.bucket_name }} \
          --delete "$(aws s3api list-object-versions \
          --bucket ${{ steps.get_resources.outputs.bucket_name }} \
          --query '{Objects: DeleteMarkers[].{Key:Key,VersionId:VersionId}}')" 2>/dev/null || true
        
        echo "Deleting S3 bucket: ${{ steps.get_resources.outputs.bucket_name }}"
        aws s3 rb s3://${{ steps.get_resources.outputs.bucket_name }} --force || true
        fi

        # Delete DynamoDB table if it exists
        if [[ -n "${{ steps.get_resources.outputs.table_name }}" ]]; then
          echo "Deleting DynamoDB table: ${{ steps.get_resources.outputs.table_name }}"
          aws dynamodb delete-table --table-name ${{ steps.get_resources.outputs.table_name }} || true
        fi

        # Detach and delete IAM policy if it exists
        if [[ -n "${{ steps.get_resources.outputs.policy_arn }}" ]]; then
          echo "Detaching policy from role: ${{ steps.get_resources.outputs.policy_arn }}"
          aws iam detach-role-policy \
            --role-name ${{ steps.get_resources.outputs.role_name }} \
            --policy-arn ${{ steps.get_resources.outputs.policy_arn }} || true
        
          echo "Deleting IAM policy: ${{ steps.get_resources.outputs.policy_name }}"
          aws iam delete-policy --policy-arn ${{ steps.get_resources.outputs.policy_arn }} || true
        fi

        # Delete IAM role if it exists
        if [[ -n "${{ steps.get_resources.outputs.role_name }}" ]]; then
           echo "Deleting IAM role: ${{ steps.get_resources.outputs.role_name }}"
          aws iam delete-role --role-name ${{ steps.get_resources.outputs.role_name }} || true
        fi

    - name: Terraform Destroy
      if: github.event_name == 'push' && github.ref == 'refs/heads/destroy-nap'
      run: |
        terraform destroy -auto-approve -input=false -lock=false -refresh=false

    - name: Final Verification
      run: |
        # Final check for S3 bucket
        if [[ -n "${{ steps.get_resources.outputs.bucket_name }}" ]]; then
          if aws s3 ls "s3://${{ steps.get_resources.outputs.bucket_name }}" 2>/dev/null; then
            echo "WARNING: Bucket ${{ steps.get_resources.outputs.bucket_name }} still exists"
            exit 1
          else
            echo "Verified bucket ${{ steps.get_resources.outputs.bucket_name }} is deleted"
          fi
        fi

        # Final check for DynamoDB table
        if [[ -n "${{ steps.get_resources.outputs.table_name }}" ]]; then
          if aws dynamodb describe-table --table-name ${{ steps.get_resources.outputs.table_name }} 2>/dev/null; then
            echo "WARNING: Table ${{ steps.get_resources.outputs.table_name }} still exists"
            exit 1
          else
            echo "Verified table ${{ steps.get_resources.outputs.table_name }} is deleted"
          fi
        fi
  