name: "NGINX v5-NAP Apply"

on:
  push:
    branches:
      - apply-nap
  pull_request:

jobs:
  terraform_infra:
    name: "AWS Infra"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infra
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Setup Terraform Backend
        run: |
          cat > backend.tf <<EOF
          terraform {
            cloud {
              organization = "${{ secrets.TF_CLOUD_ORGANIZATION }}"
              workspaces {
                name = "${{ secrets.TF_CLOUD_WORKSPACE_INFRA }}"
              }
            }
          }
          EOF

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan
        if: github.event_name == 'pull_request'
        run: |
          export TF_LOG=DEBUG
          terraform plan -no-color -input=false > plan.txt
          cat plan.txt

      - name: Terraform Plan Status
        run: |
          if grep -q "Error" plan.txt; then
            echo "❌ Terraform plan contains errors!"
            exit 1
          else
            echo "✅ Terraform plan is clean!"
          fi

      - name: Terraform Apply
        if: github.ref == 'refs/heads/apply-nap' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false

  terraform_eks:
    name: "AWS EKS"
    runs-on: ubuntu-latest
    needs: terraform_infra
    defaults:
      run:
        working-directory: ./eks-cluster
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Setup Terraform Backend
        run: |
          cat > backend.tf <<EOF
          terraform {
            cloud {
              organization = "${{ secrets.TF_CLOUD_ORGANIZATION }}"
              workspaces {
                name = "${{ secrets.TF_CLOUD_WORKSPACE_EKS }}"
              }
            }
          }
          EOF

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan
        if: github.event_name == 'pull_request'
        run: |
          export TF_LOG=DEBUG
          terraform plan -no-color -input=false | tee plan.txt
          cat plan.txt
        continue-on-error: true

      - name: Terraform Plan Status
        run: |
          if grep -q "Error" plan.txt; then
            echo "❌ Terraform plan contains errors!"
            exit 1
          else
            echo "✅ Terraform plan is clean!"
          fi

      - name: Terraform Apply
        if: github.ref == 'refs/heads/apply-nap' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false

  terraform_nap:
     name: "NGINX App Protect"
     runs-on: ubuntu-latest
     needs: terraform_eks
     defaults:
       run:
        working-directory: ./nap
     steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Setup Terraform Backend
        id: backend
        run: |
          cat > backend.tf << EOF
          terraform {
            cloud {
              organization = "${{ secrets.TF_CLOUD_ORGANIZATION }}"
              workspaces {
                name = "${{ secrets.TF_CLOUD_WORKSPACE_NAP }}"
              }
            }
          }
          EOF
          
      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/apply-nap' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false


  terraform_policy:
    name: "NGINX Policy"
    runs-on: ubuntu-latest
    needs: terraform_nap
    defaults:
      run:
        working-directory: ./policy
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client


      - name: Install Docker and Docker Compose
        run: |
          sudo apt-get update -y
          sudo apt-get remove -y containerd containerd.io
          sudo apt-get install apt-transport-https ca-certificates curl software-properties-common -y
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          sudo apt-get update -y
          sudo apt-get install docker-ce docker-ce-cli containerd.io -y
          sudo service docker start
          sudo usermod -aG docker $USER

          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Create Certificates Directory for Docker
        run: |
          sudo mkdir -p /etc/docker/certs.d/private-registry.nginx.com

      - name: Create NGINX Repository Certificate for Docker
        run: echo "${{ secrets.NGINX_REPO_CRT }}" | sudo tee /etc/docker/certs.d/private-registry.nginx.com/client.cert > /dev/null

      - name: Create NGINX Repository Key for Docker
        run: echo "${{ secrets.NGINX_REPO_KEY }}" | sudo tee /etc/docker/certs.d/private-registry.nginx.com/client.key > /dev/null

      - name: Create Certificates Directory for NGINX
        run: |
          sudo mkdir -p /etc/ssl/nginx

      - name: Save NGINX Repository Certificate for NGINX
        run: echo "${{ secrets.NGINX_REPO_CRT }}" | sudo tee /etc/ssl/nginx/nginx-repo.crt > /dev/null

      - name: Save NGINX Repository Key for NGINX
        run: echo "${{ secrets.NGINX_REPO_KEY }}" | sudo tee /etc/ssl/nginx/nginx-repo.key > /dev/null

      - name: Build Docker Image
        run: |
          docker build --no-cache \
            --secret id=nginx-crt,src=/etc/ssl/nginx/nginx-repo.crt \
            --secret id=nginx-key,src=/etc/ssl/nginx/nginx-repo.key \
            -t waf-compiler-5.4.0:custom .

      - name: Ensure correct permissions for nap/charts directory
        run: |
         sudo chown -R $USER:$USER ${{ github.workspace }}    
         sudo chmod -R 777 ${{ github.workspace }}

      - name: Run Docker Container as Root
        run: |
         sudo docker run --rm \
             -v ${{ github.workspace }}:/workspace \
               waf-compiler-5.4.0:custom \
             -p /workspace/policy/policy.json -o /workspace/policy/compiled_policy.tgz

      - name: Fix permissions for compiled_policy.tgz
        run: |
          sudo chown runner:docker ${{ github.workspace }}/policy/compiled_policy.tgz
          ls -lh ${{ github.workspace }}/policy

      - name: Convert compiled_policy.tgz to Base64
        run: |
         base64 ${{ github.workspace }}/policy/compiled_policy.tgz > ${{ github.workspace }}/policy/compiled_policy_base64.txt
      
      - name: Upload Compiled Policy as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: waf-policy-bundle
          path: |
            ${{ github.workspace }}/policy/compiled_policy.tgz
            ${{ github.workspace }}/policy/compiled_policy_base64.txt

      - name: Copy Compiled Policy to NGINX Ingress Controller Pod
        run: |
        # Get the NGINX Ingress Controller pod name
          POD_NAME=$(kubectl get pods -n nginx-ingress -l app=nginx-ingress -o jsonpath="{.items[0].metadata.name}")

        # Copy the compiled policy to the pod
          kubectl cp ${{ github.workspace }}/policy/compiled_policy.tgz $POD_NAME:/etc/app_protect/bundles/compiled_policy.tgz -n nginx-ingress

        # Verify the file was copied
          kubectl exec -n nginx-ingress $POD_NAME -- ls -lh /etc/app_protect/bundles/




        
  terraform_arcadia:
    name: "Arcadia WebApp"
    runs-on: ubuntu-latest
    needs: terraform_policy
    defaults:
      run:
        working-directory: ./arcadia
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Setup Terraform Backend
        run: |
          cat > backend.tf <<EOF
          terraform {
            cloud {
              organization = "${{ secrets.TF_CLOUD_ORGANIZATION }}"
              workspaces {
                name = "${{ secrets.TF_CLOUD_WORKSPACE_ARCADIA }}"
              }
            }
          }
          EOF

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan
        if: github.event_name == 'pull_request'
        run: |
          export TF_LOG=DEBUG
          terraform plan -no-color -input=false | tee plan.txt
          cat plan.txt
        continue-on-error: true

      - name: Terraform Plan Status
        run: |
          if grep -q "Error" plan.txt; then
            echo "❌ Terraform plan contains errors!"
            exit 1
          else
            echo "✅ Terraform plan is clean!"
          fi

      - name: Terraform Apply
        if: github.ref == 'refs/heads/apply-nap' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
