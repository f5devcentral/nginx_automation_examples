name: "NGINX V5-NAP Apply"

on:
  push:
    branches:
      - apply-nap
  pull_request:

jobs:
  terraform_infra:
    name: "AWS Infra" 
    runs-on: ubuntu-latest   
    defaults:
      run:
        working-directory: ./infra
    steps:
      - name: Checkout
        uses: actions/checkout@v3


      - name: Setup Terraform 
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Setup Terraform Backend 
        run: |
          cat > backend.tf << EOF
          terraform {
            cloud {
              organization = "${{ secrets.TF_CLOUD_ORGANIZATION }}"
              workspaces {
                name = "${{ secrets.TF_CLOUD_WORKSPACE_INFRA }}"
              }
            }
          }
          EOF

      - name: Terraform Init
        run: terraform init
      
      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan
        if: github.event_name == 'pull_request'
        run: |
          export TF_LOG=DEBUG
          terraform plan -no-color -input=false > plan.txt
          cat plan.txt

      - name: Terraform Plan Status
        run: |
          if grep -q "Error" plan.txt; then
            echo "❌ Terraform plan contains errors!"
            exit 1
          else
            echo "✅ Terraform plan is clean!"
          fi

      - name: Terraform Apply
        if: github.ref == 'refs/heads/apply-nap' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false

  terraform_eks:
    name: "AWS EKS"
    runs-on: ubuntu-latest
    needs: terraform_infra
    defaults:
      run:
        working-directory: ./eks-cluster
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Setup Terraform Backend
        run: |
          cat > backend.tf << EOF
          terraform {
            cloud {
              organization = "${{ secrets.TF_CLOUD_ORGANIZATION }}"
              workspaces {
                name = "${{ secrets.TF_CLOUD_WORKSPACE_EKS }}"
              }
            }
          }
          EOF

      - name: Terraform Init
        run: terraform init
      
      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan
        if: github.event_name == 'pull_request'
        run: |
          export TF_LOG=DEBUG
          terraform plan -no-color -input=false | tee plan.txt
          cat plan.txt
        continue-on-error: true

      - name: Terraform Plan Status
        run: |
          if grep -q "Error" plan.txt; then
            echo "❌ Terraform plan contains errors!"
            exit 1
          else
            echo "✅ Terraform plan is clean!"
          fi

      - name: Terraform Apply
        if: github.ref == 'refs/heads/apply-nap' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false

  terraform_nap:
    name: "NGINX App Protect"
    runs-on: ubuntu-latest
    needs: terraform_eks
    defaults:
      run:
        working-directory: ./nap
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - name: Install Docker and Docker Compose
        run: |
            sudo apt-get update -y
            # Uninstall conflicting containerd if necessary
            sudo apt-get remove -y containerd containerd.io

            # Install Docker from the official Docker repository
            sudo apt-get install apt-transport-https ca-certificates curl software-properties-common -y
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            sudo apt-get update -y
            sudo apt-get install docker-ce docker-ce-cli containerd.io -y
            sudo service docker start
            sudo usermod -aG docker $USER
            
            # Install Docker Compose
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            docker --version  # Optional: Check Docker version
            docker-compose --version  # Optional: Check Docker Compose version

      - name: Create Certificates Directory for Docker
        run: |
          sudo mkdir -p /etc/docker/certs.d/private-registry.nginx.com

      - name: Create NGINX Repository Certificate for Docker
        run: echo "${{ secrets.NGINX_REPO_CRT }}" | sudo tee /etc/docker/certs.d/private-registry.nginx.com/client.cert > /dev/null

      - name: Create NGINX Repository Key for Docker
        run: echo "${{ secrets.NGINX_REPO_KEY }}" | sudo tee /etc/docker/certs.d/private-registry.nginx.com/client.key > /dev/null

      - name: Create Certificates Directory for NGINX
        run: |
          sudo mkdir -p /etc/ssl/nginx

      - name: Save NGINX Repository Certificate for NGINX
        run: echo "${{ secrets.NGINX_REPO_CRT }}" | sudo tee /etc/ssl/nginx/nginx-repo.crt > /dev/null

      - name: Save NGINX Repository Key for NGINX
        run: echo "${{ secrets.NGINX_REPO_KEY }}" | sudo tee /etc/ssl/nginx/nginx-repo.key > /dev/null


      - name: Build Docker Image
        run: |
          docker build --no-cache \
            --secret id=nginx-crt,src=/etc/ssl/nginx/nginx-repo.crt \
            --secret id=nginx-key,src=/etc/ssl/nginx/nginx-repo.key \
            -t waf-compiler-5.5.0:custom ./charts

     - name: Ensure correct permissions for nap/charts directory
       run: |
         sudo chown -R $USER:$USER ${{ github.workspace }}/nap/charts
         sudo chmod -R 777 ${{ github.workspace }}/nap/charts  # Allow full permissions



      - name: Run Docker Container as Root
        run: |
          sudo docker run --rm \
            -v ${{ github.workspace }}/nap/charts:/workspace \
            waf-compiler-5.5.0:custom \
            -p /workspace/policy.json -o /workspace/compiled_policy.tgz

      - name: Fix permissions for compiled_policy.tgz
        run: |
          sudo chown runner:docker ${{ github.workspace }}/nap/charts/compiled_policy.tgz
          ls -lh ${{ github.workspace }}/nap/charts

      - name: Convert compiled_policy.tgz to Base64
        run: |
          base64 ${{ github.workspace }}/nap/charts/compiled_policy.tgz > ${{ github.workspace }}/nap/charts/compiled_policy_base64.txt

      - name: Upload Compiled Policy as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: waf-policy-bundle
          path: |
            ${{ github.workspace }}/nap/charts/compiled_policy.tgz
            ${{ github.workspace }}/nap/charts/compiled_policy_base64.txt

     
      - name: Setup Terraform Backend
        run: |
          cat > backend.tf << EOF
          terraform {
            cloud {
              organization = "${{ secrets.TF_CLOUD_ORGANIZATION }}"
              workspaces {
                name = "${{ secrets.TF_CLOUD_WORKSPACE_NAP }}"
              }
            }
          }
          EOF

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan
        if: github.event_name == 'pull_request'
        run: |
          export TF_LOG=DEBUG
          terraform plan -no-color -input=false | tee plan.txt
          cat plan.txt
        continue-on-error: true

      - name: Terraform Plan Status
        run: |
          if grep -q "Error" plan.txt; then
            echo "❌ Terraform plan contains errors!"
            exit 1
          else
            echo "✅ Terraform plan is clean!"
          fi

      - name: Terraform Apply
        if: github.ref == 'refs/heads/apply-nap' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
 
      - name: Create ConfigMap for NGINX App Protect Policy
        run: |
          POLICY=$(cat ${{ github.workspace }}/nap/charts/compiled_policy_base64.txt)
          cat <<EOF > ${{ github.workspace }}/nap/charts/waf-policy-bundle.yaml
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: waf-policy-bundle
            namespace: nginx-ingress
          binaryData:
            policy_bundle.tgz: ${POLICY}
          EOF

          # Debugging: Ensure file exists before applying
          ls -lh ${{ github.workspace }}/nap/charts
          cat ${{ github.workspace }}/nap/charts/waf-policy-bundle.yaml

          kubectl apply -f ${{ github.workspace }}/nap/charts/waf-policy-bundle.yaml
    

      
          
  terraform_arcadia:
    name: "Arcadia WebApp"
    runs-on: ubuntu-latest
    needs: terraform_nap
    defaults:
      run:
        working-directory: ./arcadia
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Setup Terraform Backend
        run: |
          cat > backend.tf << EOF
          terraform {
            cloud {
              organization = "${{ secrets.TF_CLOUD_ORGANIZATION }}"
              workspaces {
                name = "${{ secrets.TF_CLOUD_WORKSPACE_ARCADIA }}"
              }
            }
          }
          EOF

      - name: Terraform Init
        run: terraform init
      
      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan
        if: github.event_name == 'pull_request'
        run: |
          export TF_LOG=DEBUG
          terraform plan -no-color -input=false | tee plan.txt
          cat plan.txt
        continue-on-error: true

      - name: Terraform Plan Status
        run: |
          if grep -q "Error" plan.txt; then
            echo "❌ Terraform plan contains errors!"
            exit 1
          else
            echo "✅ Terraform plan is clean!"
          fi

      - name: Terraform Apply
        if: github.ref == 'refs/heads/apply-nap' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
