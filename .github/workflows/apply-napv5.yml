name: "NGINX v5-NAP Apply"

on:
  push:
    branches:
      - apply-nap
  pull_request:

jobs:
  terraform_infra:
    name: "AWS Infra"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infra
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Setup Backend
        run: |
          cat <<EOF > backend.tf
          terraform {
            cloud {
              organization = "${{ secrets.TF_CLOUD_ORGANIZATION }}"
              workspaces { name = "${{ secrets.TF_CLOUD_WORKSPACE_INFRA }}" }
            }
          }
          EOF

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        if: github.event_name == 'pull_request' || github.event_name == 'push'
        run: |
          terraform plan -no-color -input=false -out=tfplan
          terraform show -no-color tfplan > plan.txt

      - name: Check Changes
        id: check_changes
        run: |
          if grep -q "No changes." plan.txt; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/apply-nap' && steps.check_changes.outputs.has_changes == 'true'
        run: terraform apply -auto-approve tfplan

  terraform_eks:
     name: "AWS EKS"
     runs-on: ubuntu-latest
     needs: terraform_infra
     defaults:
      run:
        working-directory: ./eks-cluster
     steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Setup Backend
        run: |
          cat <<EOF > backend.tf
          terraform {
            cloud {
              organization = "${{ secrets.TF_CLOUD_ORGANIZATION }}"
              workspaces { name = "${{ secrets.TF_CLOUD_WORKSPACE_EKS }}" }
            }
          }
          EOF

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        if: github.event_name == 'pull_request' || github.event_name == 'push'
        run: |
          terraform plan -no-color -input=false -out=tfplan
          terraform show -no-color tfplan > plan.txt

      - name: Print Terraform Plan
        run: cat plan.txt

      - name: Check Changes
        id: check_changes
        run: |
          if grep -q "No changes." plan.txt; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/apply-nap' && steps.check_changes.outputs.has_changes == 'true'
        env:
          TF_LOG: DEBUG
        run: terraform apply -auto-approve tfplan

  terraform_nap:
    name: "NGINX App Protect"
    runs-on: ubuntu-latest
    needs: terraform_eks 
    defaults:
      run:
        working-directory: ./nap
    steps:
      - name: Checkout
        uses: actions/checkout@v4
          
      - name: Git Pull
        run: |
          git pull

      - name: Debug Compiled Policy
        run: |
         echo "Compiled Policy:"
         ls -la ${{ github.workspace }}/policy
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Setup Backend
        run: |
          cat <<EOF > backend.tf
          terraform {
            cloud {
              organization = "${{ secrets.TF_CLOUD_ORGANIZATION }}"
              workspaces { name = "${{ secrets.TF_CLOUD_WORKSPACE_NAP }}" }
            }
          }
          EOF

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        if: github.event_name == 'pull_request' || github.event_name == 'push'
        run: |
         terraform plan -no-color -input=false -out=tfplan
         terraform show -no-color tfplan > plan.txt

      - name: Check Changes
        id: check_changes
        run: |
          if grep -q "No changes." plan.txt; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Apply
        run: terraform apply -auto-approve -var="workspace_path=${{ github.workspace }}/policy/compiled_policy.tgz"

  terraform_policy:
    name: "NGINX Policy"
    runs-on: ubuntu-latest
    needs: terraform_nap
    defaults:
      run:
        working-directory: ./policy
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          cli_config_credentials_hostname: app.terraform.io
          terraform_version: latest
          terraform_wrapper: true

      - name: Fetch AWS Credentials from Terraform Cloud
        env:
          TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
          TF_ORG: tf_cloud_organization
          TF_WORKSPACE: Policy
        run: |
          # Debug: Print the workspace API request URL
          echo "Workspace API URL: https://app.terraform.io/api/v2/organizations/$TF_ORG/workspaces/$TF_WORKSPACE"

          # Fetch workspace ID
          WORKSPACE_RESPONSE=$(curl -s \
            --header "Authorization: Bearer $TF_API_TOKEN" \
            --header "Content-Type: application/vnd.api+json" \
            "https://app.terraform.io/api/v2/organizations/$TF_ORG/workspaces/$TF_WORKSPACE")

          # Debug: Print the workspace API response
          echo "Workspace API Response:"
          echo "$WORKSPACE_RESPONSE"

          # Extract workspace ID
          WORKSPACE_ID=$(echo "$WORKSPACE_RESPONSE" | jq -r '.data.id')
          if [ -z "$WORKSPACE_ID" ]; then
            echo "Error: Failed to fetch workspace ID. Response:"
            echo "$WORKSPACE_RESPONSE"
            exit 1
          fi
          echo "Workspace ID: $WORKSPACE_ID"

          # Debug: Print the variables API request URL
          echo "Variables API URL: https://app.terraform.io/api/v2/workspaces/$WORKSPACE_ID/vars"

          # Fetch variables for the workspace
          VARIABLES_RESPONSE=$(curl -s \
            --header "Authorization: Bearer $TF_API_TOKEN" \
            --header "Content-Type: application/vnd.api+json" \
            "https://app.terraform.io/api/v2/workspaces/$WORKSPACE_ID/vars")

          # Debug: Print the variables API response
          echo "Variables API Response:"
          echo "$VARIABLES_RESPONSE"

          # Extract variables
          VARIABLES=$(echo "$VARIABLES_RESPONSE" | jq -r '.data[] | select(.attributes.category == "env") | select(.attributes.key | startswith("AWS_")) | "\(.attributes.key)=\(.attributes.value)"')
          if [ -z "$VARIABLES" ]; then
            echo "Error: No AWS credentials found in the variables. Response:"
            echo "$VARIABLES_RESPONSE"
            exit 1
          fi

          # Export variables
          while IFS= read -r line; do
            export "$line"
          done <<< "$VARIABLES"

          # Debug: Print AWS credentials (masked for security)
          echo "AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:0:4}****"
          echo "AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:0:4}****"
          echo "AWS_SESSION_TOKEN: ${AWS_SESSION_TOKEN:0:4}****"

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
          aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
          if [ -n "$AWS_SESSION_TOKEN" ]; then
            aws configure set aws_session_token "$AWS_SESSION_TOKEN"
          fi

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --name $(terraform output -raw cluster_name) --region $(terraform output -raw aws_region)

      - name: Verify kubectl access
        run: |
          kubectl get nodes

      - name: Install Docker and Docker Compose
        run: |
          sudo apt-get update -y
          sudo apt-get remove -y containerd containerd.io
          sudo apt-get install apt-transport-https ca-certificates curl software-properties-common -y
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          sudo apt-get update -y
          sudo apt-get install docker-ce docker-ce-cli containerd.io -y
          sudo service docker start
          sudo usermod -aG docker $USER

          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Create Certificates Directory for Docker
        run: |
          sudo mkdir -p /etc/docker/certs.d/private-registry.nginx.com

      - name: Create NGINX Repository Certificate for Docker
        run: echo "${{ secrets.NGINX_REPO_CRT }}" | sudo tee /etc/docker/certs.d/private-registry.nginx.com/client.cert > /dev/null

      - name: Create NGINX Repository Key for Docker
        run: echo "${{ secrets.NGINX_REPO_KEY }}" | sudo tee /etc/docker/certs.d/private-registry.nginx.com/client.key > /dev/null

      - name: Create Certificates Directory for NGINX
        run: |
          sudo mkdir -p /etc/ssl/nginx

      - name: Save NGINX Repository Certificate for NGINX
        run: echo "${{ secrets.NGINX_REPO_CRT }}" | sudo tee /etc/ssl/nginx/nginx-repo.crt > /dev/null

      - name: Save NGINX Repository Key for NGINX
        run: echo "${{ secrets.NGINX_REPO_KEY }}" | sudo tee /etc/ssl/nginx/nginx-repo.key > /dev/null

      - name: Build Docker Image
        run: |
          docker build --no-cache \
            --secret id=nginx-crt,src=/etc/ssl/nginx/nginx-repo.crt \
            --secret id=nginx-key,src=/etc/ssl/nginx/nginx-repo.key \
            -t waf-compiler-5.4.0:custom .

      - name: Ensure correct permissions for nap/charts directory
        run: |
          sudo chown -R $USER:$USER ${{ github.workspace }}    
          sudo chmod -R 777 ${{ github.workspace }}

      - name: Run Docker Container as Root
        run: |
          docker run --rm \
              -v ${{ github.workspace }}:/workspace \
                waf-compiler-5.4.0:custom \
              -p /workspace/policy/policy.json -o /workspace/policy/compiled_policy.tgz

      - name: Convert Compiled Policy to Base64
        run: |
          base64 ${{ github.workspace }}/policy/compiled_policy.tgz > ${{ github.workspace }}/policy/compiled_policy_base64.txt

      - name: Fix permissions for compiled files
        run: |
          sudo chown -R $USER:$USER ${{ github.workspace }}/policy
          chmod 644 ${{ github.workspace }}/policy/compiled_policy.tgz
          chmod 644 ${{ github.workspace }}/policy/compiled_policy_base64.txt
          ls -lh ${{ github.workspace }}/policy

      - name: Upload Compiled Policy as Artifact
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git add .
          git commit -m 'Committing Policy'
          git push

      - name: Copy Compiled Policy to NGINX Ingress Controller
        run: |
          NGINX_POD=$(kubectl get pods -n nginx-ingress -l app=nginx-ingress -o jsonpath='{.items[0].metadata.name}')
          kubectl cp ${{ github.workspace }}/policy/compiled_policy.tgz $NGINX_POD:/etc/app_protect/bundles/compiled_policy.tgz -n nginx-ingress -c nginx-plus-ingress

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: |
          terraform plan -no-color -input=false -out=tfplan
          terraform show -no-color tfplan > plan.txt

      - name: Check Changes
        id: check_changes
        run: |
          if grep -q "No changes." plan.txt; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/apply-nap' && steps.check_changes.outputs.has_changes == 'true'
        run: terraform apply -auto-approve tfplan
 
  terraform_arcadia:
    name: "Arcadia WebApp"
    runs-on: ubuntu-latest
    needs: terraform_policy
    defaults:
      run:
        working-directory: ./arcadia
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Setup Backend
        run: |
          cat <<EOF > backend.tf
          terraform {
            cloud {
              organization = "${{ secrets.TF_CLOUD_ORGANIZATION }}"
              workspaces { name = "${{ secrets.TF_CLOUD_WORKSPACE_ARCADIA }}" }
            }
          }
          EOF

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan
        if: github.event_name == 'pull_request' || github.event_name == 'push'
        run: |
          terraform plan -no-color -input=false -out=tfplan
          terraform show -no-color tfplan > plan.txt

      - name: Check Changes
        id: check_changes
        run: |
          if grep -q "No changes." plan.txt; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/apply-nap' && steps.check_changes.outputs.has_changes == 'true'
        run: terraform apply -auto-approve tfplan
