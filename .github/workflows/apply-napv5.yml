name: "NGINX v5-NAP Apply"

on:
  push:
    branches:
      - apply-nap
  pull_request:

jobs:
  terraform_infra:
    name: "AWS Infra"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infra
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Setup Backend
        run: |
          cat <<EOF > backend.tf
          terraform {
            cloud {
              organization = "${{ secrets.TF_CLOUD_ORGANIZATION }}"
              workspaces { name = "${{ secrets.TF_CLOUD_WORKSPACE_INFRA }}" }
            }
          }
          EOF

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        if: github.event_name == 'pull_request' || github.event_name == 'push'
        run: |
          terraform plan -no-color -input=false -out=tfplan
          terraform show -no-color tfplan > plan.txt

      - name: Check Changes
        id: check_changes
        run: |
          if grep -q "No changes." plan.txt; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/apply-nap' && steps.check_changes.outputs.has_changes == 'true'
        run: terraform apply -auto-approve tfplan

  terraform_eks:
     name: "AWS EKS"
     runs-on: ubuntu-latest
     needs: terraform_infra
     defaults:
      run:
        working-directory: ./eks-cluster
     steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Setup Backend
        run: |
          cat <<EOF > backend.tf
          terraform {
            cloud {
              organization = "${{ secrets.TF_CLOUD_ORGANIZATION }}"
              workspaces { name = "${{ secrets.TF_CLOUD_WORKSPACE_EKS }}" }
            }
          }
          EOF

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        if: github.event_name == 'pull_request' || github.event_name == 'push'
        run: |
          terraform plan -no-color -input=false -out=tfplan
          terraform show -no-color tfplan > plan.txt

      - name: Print Terraform Plan
        run: cat plan.txt

      - name: Check Changes
        id: check_changes
        run: |
          if grep -q "No changes." plan.txt; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/apply-nap' && steps.check_changes.outputs.has_changes == 'true'
        env:
          TF_LOG: DEBUG
        run: terraform apply -auto-approve tfplan
          
  terraform_policy:
    name: "NGINX Policy"
    runs-on: ubuntu-latest
    needs: terraform_eks
    defaults:
      run:
        working-directory: ./policy
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client

      - name: Install Docker and Docker Compose
        run: |
          sudo apt-get update -y
          sudo apt-get remove -y containerd containerd.io
          sudo apt-get install apt-transport-https ca-certificates curl software-properties-common -y
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          sudo apt-get update -y
          sudo apt-get install docker-ce docker-ce-cli containerd.io -y
          sudo service docker start
          sudo usermod -aG docker $USER

          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Create Certificates Directory for Docker
        run: |
          sudo mkdir -p /etc/docker/certs.d/private-registry.nginx.com

      - name: Create NGINX Repository Certificate for Docker
        run: echo "${{ secrets.NGINX_REPO_CRT }}" | sudo tee /etc/docker/certs.d/private-registry.nginx.com/client.cert > /dev/null

      - name: Create NGINX Repository Key for Docker
        run: echo "${{ secrets.NGINX_REPO_KEY }}" | sudo tee /etc/docker/certs.d/private-registry.nginx.com/client.key > /dev/null

      - name: Create Certificates Directory for NGINX
        run: |
          sudo mkdir -p /etc/ssl/nginx

      - name: Save NGINX Repository Certificate for NGINX
        run: echo "${{ secrets.NGINX_REPO_CRT }}" | sudo tee /etc/ssl/nginx/nginx-repo.crt > /dev/null

      - name: Save NGINX Repository Key for NGINX
        run: echo "${{ secrets.NGINX_REPO_KEY }}" | sudo tee /etc/ssl/nginx/nginx-repo.key > /dev/null

      - name: Build Docker Image
        run: |
          docker build --no-cache \
            --secret id=nginx-crt,src=/etc/ssl/nginx/nginx-repo.crt \
            --secret id=nginx-key,src=/etc/ssl/nginx/nginx-repo.key \
            -t waf-compiler-5.4.0:custom .

      - name: Ensure correct permissions for nap/charts directory
        run: |
          sudo chown -R $USER:$USER ${{ github.workspace }}    
          sudo chmod -R 777 ${{ github.workspace }}

      - name: Run Docker Container as Root
        run: |
          sudo docker run --rm \
              -v ${{ github.workspace }}:/workspace \
                waf-compiler-5.4.0:custom \
              -p /workspace/policy/policy.json -o /workspace/policy/compiled_policy.tgz

      - name: Convert Compiled Policy to Base64
        run: |
          base64 ${{ github.workspace }}/policy/compiled_policy.tgz > ${{ github.workspace }}/policy/compiled_policy_base64.txt

      - name: Verify Compiled Policy Base64 File (Before Upload)
        run: |
          ls -lh ${{ github.workspace }}/policy
          cat ${{ github.workspace }}/policy/compiled_policy_base64.txt


      - name: Fix permissions for compiled files
        run: |
          sudo chown runner:docker ${{ github.workspace }}/policy/compiled_policy.tgz
          sudo chown runner:docker ${{ github.workspace }}/policy/compiled_policy_base64.txt
          ls -lh ${{ github.workspace }}/policy

      - name: Verify Compiled Policy Base64 File (Before Upload)
        run: |
          cat ${{ github.workspace }}/policy/compiled_policy_base64.txt          path: |
            ${{ github.workspace }}/policy/compiled_policy.tgz
            ${{ github.workspace }}/policy/compiled_policy_base64.txt

      - name: Upload Compiled Policy as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: waf-policy-bundle

  terraform_nap:
    name: "NGINX App Protect"
    runs-on: ubuntu-latest
    needs: terraform_policy  
    defaults:
      run:
        working-directory: ./nap
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create Policy Directory
        run: mkdir -p ./policy

      - name: Download Compiled Policy
        uses: actions/download-artifact@v4
        with:
          name: waf-policy-bundle
          path: ./policy


      - name: Fix Permissions for Downloaded Artifacts
        run: |
          sudo chown -R $USER:$USER ./policy
          sudo chmod -R 755 ./policy

      - name: Verify Compiled Policy Base64 File
        run: |
          ls -lh ./policy
          cat ./policy/compiled_policy_base64.txt


      - name: Debug Compiled Policy Base64
        run: |
          echo "Compiled Policy Base64:"
          echo "$(cat ./policy/compiled_policy_base64.txt)"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Setup Backend
        run: |
          cat <<EOF > backend.tf
          terraform {
            cloud {
              organization = "${{ secrets.TF_CLOUD_ORGANIZATION }}"
              workspaces { name = "${{ secrets.TF_CLOUD_WORKSPACE_NAP }}" }
            }
          }
          EOF

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        if: github.event_name == 'pull_request' || github.event_name == 'push'
        run: |
          terraform plan -no-color -input=false -out=tfplan
          terraform show -no-color tfplan > plan.txt

      - name: Check Changes
        id: check_changes
        run: |
          if grep -q "No changes." plan.txt; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Create terraform.tfvars
        run: |
          echo 'compiled_policy_base64 = "$(cat ./policy/compiled_policy_base64.txt)"' > terraform.tfvars

      - name: Terraform Apply
        run: terraform apply -auto-approve

 
  terraform_arcadia:
    name: "Arcadia WebApp"
    runs-on: ubuntu-latest
    needs: terraform_nap
    defaults:
      run:
        working-directory: ./arcadia
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Setup Backend
        run: |
          cat <<EOF > backend.tf
          terraform {
            cloud {
              organization = "${{ secrets.TF_CLOUD_ORGANIZATION }}"
              workspaces { name = "${{ secrets.TF_CLOUD_WORKSPACE_ARCADIA }}" }
            }
          }
          EOF

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan
        if: github.event_name == 'pull_request' || github.event_name == 'push'
        run: |
          terraform plan -no-color -input=false -out=tfplan
          terraform show -no-color tfplan > plan.txt

      - name: Check Changes
        id: check_changes
        run: |
          if grep -q "No changes." plan.txt; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/apply-nap' && steps.check_changes.outputs.has_changes == 'true'
        run: terraform apply -auto-approve tfplan
