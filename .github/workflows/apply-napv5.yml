name: "NGINX v5-NAP Apply"
on:
  push:
    branches:
      - apply-nap
  pull_request:

jobs:
  terraform_infra:
    name: "AWS Infra"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infra
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Setup Backend
        run: |
          cat <<EOF > backend.tf
          terraform {
            cloud {
              organization = "${{ secrets.TF_CLOUD_ORGANIZATION }}"
              workspaces { name = "${{ secrets.TF_CLOUD_WORKSPACE_INFRA }}" }
            }
          }
          EOF

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        if: github.event_name == 'pull_request' || github.event_name == 'push'
        run: terraform plan -no-color -input=false -out=tfplan

      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/apply-nap'
        run: terraform apply -auto-approve tfplan

  terraform_eks:
    name: "AWS EKS"
    runs-on: ubuntu-latest
    needs: terraform_infra
    defaults:
      run:
        working-directory: ./eks-cluster
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Setup Backend
        run: |
          cat <<EOF > backend.tf
          terraform {
            cloud {
              organization = "${{ secrets.TF_CLOUD_ORGANIZATION }}"
              workspaces { name = "${{ secrets.TF_CLOUD_WORKSPACE_EKS }}" }
            }
          }
          EOF

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        if: github.event_name == 'pull_request' || github.event_name == 'push'
        run: terraform plan -no-color -input=false -out=tfplan

      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/apply-nap'
        run: terraform apply -auto-approve tfplan

      - name: Generate Kubeconfig
        if: github.event_name == 'push'
        run: |
          terraform output -raw kubeconfig > kubeconfig
          base64 -w0 kubeconfig > kubeconfig.b64
          ls -la

      - name: Upload Kubeconfig
        uses: actions/upload-artifact@v4
        with:
          name: eks-kubeconfig
          path: |
           eks-cluster/kubeconfig
           eks-cluster/kubeconfig.b64
          retention-days: 2

  terraform_nap:
    name: "NGINX App Protect"
    runs-on: ubuntu-latest
    needs: terraform_eks
    defaults:
      run:
        working-directory: ./nap
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Kubeconfig
        uses: actions/download-artifact@v4
        with:
          name: eks-kubeconfig
          path: .
      - name: Verify Artifact Download
        run: |
          ls -la
          [ -f kubeconfig.b64 ] || exit 1

      - name: Configure Access
        run: |
        mkdir -p ~/.kube
        base64 -d kubeconfig.b64 > config
        mv config ~/.kube/
        chmod 600 ~/.kube/config
        kubectl config use-context aws
        kubectl get nodes


      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Setup Backend
        run: |
          cat <<EOF > backend.tf
          terraform {
            cloud {
              organization = "${{ secrets.TF_CLOUD_ORGANIZATION }}"
              workspaces { name = "${{ secrets.TF_CLOUD_WORKSPACE_NAP }}" }
            }
          }
          EOF

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        if: github.event_name == 'pull_request' || github.event_name == 'push'
        run: terraform plan -no-color -input=false -out=tfplan

      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/apply-nap'
        run: terraform apply -auto-approve tfplan

  terraform_policy:
    name: "NGINX Policy"
    runs-on: ubuntu-latest
    needs: terraform_nap
    defaults:
      run:
        working-directory: ./policy
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Kubeconfig
        uses: actions/download-artifact@v4
        with:
          name: eks-kubeconfig
          path: .

      - name: Configure Access
        run: |
          base64 -d kubeconfig.b64 > kubeconfig
          chmod 600 kubeconfig
          kubectl get nodes

      - name: Setup Docker
        uses: docker/setup-buildx-action@v3

      - name: Configure Certificates
        env:
          NGINX_CRT: ${{ secrets.NGINX_REPO_CRT }}
          NGINX_KEY: ${{ secrets.NGINX_REPO_KEY }}
        run: |
          mkdir -p {/etc/docker/certs.d/private-registry.nginx.com,/etc/ssl/nginx}
          echo "$NGINX_CRT" | tee \
            /etc/docker/certs.d/private-registry.nginx.com/client.cert \
            /etc/ssl/nginx/nginx-repo.crt >/dev/null
          echo "$NGINX_KEY" | tee \
            /etc/docker/certs.d/private-registry.nginx.com/client.key \
            /etc/ssl/nginx/nginx-repo.key >/dev/null
          chmod 644 /etc/ssl/nginx/*

      - name: Build Image
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: waf-compiler-5.4.0:custom
          secrets: |
            "nginx-crt=/etc/ssl/nginx/nginx-repo.crt"
            "nginx-key=/etc/ssl/nginx/nginx-repo.key"

      - name: Generate Policy
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            waf-compiler-5.4.0:custom \
            -p /workspace/policy/policy.json -o /workspace/policy/compiled_policy.tgz

      - name: Deploy Policy
        run: |
          POD=$(kubectl get pod -n nginx-ingress -l app=nginx-ingress -o jsonpath='{.items[0].metadata.name}')
          kubectl cp compiled_policy.tgz $POD:/etc/app_protect/bundles/ -n nginx-ingress

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: policy-bundle
          path: |
            compiled_policy.tgz
            compiled_policy_base64.txt
          retention-days: 1

  terraform_arcadia:
    name: "Arcadia WebApp"
    runs-on: ubuntu-latest
    needs: terraform_policy
    defaults:
      run:
        working-directory: ./arcadia
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Setup Backend
        run: |
          cat <<EOF > backend.tf
          terraform {
            cloud {
              organization = "${{ secrets.TF_CLOUD_ORGANIZATION }}"
              workspaces { name = "${{ secrets.TF_CLOUD_WORKSPACE_ARCADIA }}" }
            }
          }
          EOF

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan
        if: github.event_name == 'pull_request' || github.event_name == 'push'
        run: terraform plan -no-color -input=false -out=tfplan

      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/apply-nap'
        run: terraform apply -auto-approve tfplan
