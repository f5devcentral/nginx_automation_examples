name: "NGINX v5-NAP Apply"

on:
  push:
    branches:
      - apply-nap
  pull_request:

jobs:
  terraform_infra:
    name: "AWS Infra"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infra
    steps:
      - name: Checkout
        uses: actions/checkout@v4  # Updated to v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3  # Updated to v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Setup Terraform Backend
        run: |
          cat > backend.tf <<EOF
          terraform {
            cloud {
              organization = "${{ secrets.TF_CLOUD_ORGANIZATION }}"
              workspaces {
                name = "${{ secrets.TF_CLOUD_WORKSPACE_INFRA }}"
              }
            }
          }
          EOF

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan
        if: github.event_name == 'pull_request'
        run: |
          export TF_LOG=DEBUG
          terraform plan -no-color -input=false -out=tfplan  # Added plan file
          terraform show -no-color tfplan > plan.txt

      - name: Terraform Plan Status
        run: |
          if grep -q "Error" plan.txt; then
            echo "❌ Terraform plan contains errors!"
            exit 1
          else
            echo "✅ Terraform plan is clean!"
          fi

      - name: Terraform Apply
        if: github.ref == 'refs/heads/apply-nap' && github.event_name == 'push'
        run: terraform apply -auto-approve tfplan  # Use saved plan

  terraform_eks:
    name: "AWS EKS"
    runs-on: ubuntu-latest
    needs: terraform_infra
    defaults:
      run:
        working-directory: ./eks-cluster
    steps:
      - name: Checkout
        uses: actions/checkout@v4  # Updated to v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3  # Updated to v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Setup Terraform Backend
        run: |
          cat > backend.tf <<EOF
          terraform {
            cloud {
              organization = "${{ secrets.TF_CLOUD_ORGANIZATION }}"
              workspaces {
                name = "${{ secrets.TF_CLOUD_WORKSPACE_EKS }}"
              }
            }
          }
          EOF

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan
        if: github.event_name == 'pull_request'
        run: |
          export TF_LOG=DEBUG
          terraform plan -no-color -input=false -out=tfplan  # Added plan file
          terraform show -no-color tfplan | tee plan.txt
        continue-on-error: true

      - name: Terraform Plan Status
        run: |
          if grep -q "Error" plan.txt; then
            echo "❌ Terraform plan contains errors!"
            exit 1
          else
            echo "✅ Terraform plan is clean!"
          fi

      - name: Terraform Apply
        if: github.ref == 'refs/heads/apply-nap' && github.event_name == 'push'
        run: terraform apply -auto-approve tfplan  # Use saved plan
     
      - name: Get Kubeconfig
        run: |
          terraform output -raw kubeconfig > kubeconfig
          base64 -w0 kubeconfig > kubeconfig.b64  # Added base64 encoding
        
      - name: Upload kubeconfig as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: kubeconfig
          path: 
            - kubeconfig
            - kubeconfig.b64  # Upload both files
          retention-days: 1  # Auto-cleanup

  terraform_nap:
    name: "NGINX App Protect"
    runs-on: ubuntu-latest
    needs: terraform_eks
    defaults:
      run:
        working-directory: ./nap
    steps:
      - name: Checkout
        uses: actions/checkout@v4  # Updated to v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3  # Updated to v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Setup Terraform Backend
        run: |
          cat > backend.tf <<EOF
          terraform {
            cloud {
              organization = "${{ secrets.TF_CLOUD_ORGANIZATION }}"
              workspaces {
                name = "${{ secrets.TF_CLOUD_WORKSPACE_NAP }}"
              }
            }
          }
          EOF
          
      - name: Terraform Init
        run: terraform init
      
      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false -out=tfplan  # Added plan file

      - uses: actions/github-script@v7  # Updated to v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n$(terraform show -no-color tfplan)"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan 📖
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Apply
        if: github.ref == 'refs/heads/apply-nap' && github.event_name == 'push'
        run: terraform apply -auto-approve tfplan  # Use saved plan

  terraform_policy:
    name: "NGINX Policy"
    runs-on: ubuntu-latest
    needs: terraform_nap
    defaults:
      run:
        working-directory: ./policy
    steps:
      - name: Checkout
        uses: actions/checkout@v4  # Updated to v4

      - name: Download kubeconfig Artifact
        uses: actions/download-artifact@v4
        with:
          name: kubeconfig
          path: ./policy

      - name: Configure Kubernetes
        run: |
          base64 -d kubeconfig.b64 > kubeconfig  # Decode base64
          chmod 600 kubeconfig  # Secure permissions
          kubectl cluster-info

      - name: Setup Docker
        uses: docker/setup-buildx-action@v3  # Official Docker setup

      - name: Configure Certificates
        env:
          NGINX_CRT: ${{ secrets.NGINX_REPO_CRT }}
          NGINX_KEY: ${{ secrets.NGINX_REPO_KEY }}
        run: |
          sudo mkdir -p /etc/docker/certs.d/private-registry.nginx.com
          echo "$NGINX_CRT" | sudo tee /etc/docker/certs.d/private-registry.nginx.com/client.cert > /dev/null
          echo "$NGINX_KEY" | sudo tee /etc/docker/certs.d/private-registry.nginx.com/client.key > /dev/null
          mkdir -p /etc/ssl/nginx
          echo "$NGINX_CRT" | sudo tee /etc/ssl/nginx/nginx-repo.crt > /dev/null
          echo "$NGINX_KEY" | sudo tee /etc/ssl/nginx/nginx-repo.key > /dev/null
          sudo chmod 644 /etc/ssl/nginx/*  # Secure permissions

      - name: Build Docker Image
        uses: docker/build-push-action@v5  # Official build action
        with:
          context: .
          tags: waf-compiler-5.4.0:custom
          secrets: |
            "nginx-crt=/etc/ssl/nginx/nginx-repo.crt"
            "nginx-key=/etc/ssl/nginx/nginx-repo.key"

      - name: Run Docker Container
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            waf-compiler-5.4.0:custom \
            -p /workspace/policy/policy.json -o /workspace/policy/compiled_policy.tgz

      - name: Prepare Policy Bundle
        run: |
          base64 compiled_policy.tgz > compiled_policy_base64.txt
          chmod 644 compiled_policy.tgz  # Secure permissions

      - name: Upload Compiled Policy
        uses: actions/upload-artifact@v4
        with:
          name: waf-policy-bundle
          path: |
            compiled_policy.tgz
            compiled_policy_base64.txt
          retention-days: 1  # Auto-cleanup

      - name: Deploy Policy to Cluster
        run: |
          POD_NAME=$(kubectl get pods -n nginx-ingress -l app=nginx-ingress -o jsonpath="{.items[0].metadata.name}")
          kubectl cp compiled_policy.tgz $POD_NAME:/etc/app_protect/bundles/ -n nginx-ingress
          kubectl exec $POD_NAME -n nginx-ingress -- ls -lh /etc/app_protect/bundles/

  terraform_arcadia:
    name: "Arcadia WebApp"
    runs-on: ubuntu-latest
    needs: terraform_policy
    defaults:
      run:
        working-directory: ./arcadia
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Setup Terraform Backend
        run: |
          cat > backend.tf <<EOF
          terraform {
            cloud {
              organization = "${{ secrets.TF_CLOUD_ORGANIZATION }}"
              workspaces {
                name = "${{ secrets.TF_CLOUD_WORKSPACE_ARCADIA }}"
              }
            }
          }
          EOF

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan
        if: github.event_name == 'pull_request'
        run: |
          export TF_LOG=DEBUG
          terraform plan -no-color -input=false | tee plan.txt
          cat plan.txt
        continue-on-error: true

      - name: Terraform Plan Status
        run: |
          if grep -q "Error" plan.txt; then
            echo "❌ Terraform plan contains errors!"
            exit 1
          else
            echo "✅ Terraform plan is clean!"
          fi

      - name: Terraform Apply
        if: github.ref == 'refs/heads/apply-nap' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
