name: "NGINX NAPV5"

on:
  push:
    branches:
      - apply-nap
  pull_request:

env:
  AWS_REGION: us-east-1
  TF_STATE_BUCKET: akash-terraform-state-bucket
  TF_STATE_KEY: infra/terraform.tfstate

jobs:
  terraform_infra:
    name: "AWS Infra"
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    defaults:
      run:
        working-directory: ./infra

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Initial bootstrap with admin credentials
      - name: Configure Admin Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Handle Existing Resources
        run: |
          # Check if resource exists in state
          if terraform state list | grep -q 'aws_dynamodb_table.terraform_state_lock'; then
             echo "Resource already managed by Terraform"
             terraform apply -refresh-only -auto-approve
          else
            # Import if exists in AWS but not in state
            if aws dynamodb describe-table --table-name terraform-lock-table --region $AWS_REGION; then
              terraform import aws_dynamodb_table.terraform_state_lock terraform-lock-table
            fi
          fi
  
       # Create missing resources
      - name: Bootstrap State Resources
        run: |
          terraform init -backend=false
          terraform apply \
            -target=aws_dynamodb_table.terraform_state_lock \
            -target=aws_s3_bucket.state \
            -auto-approve \
            -lock=false \
            -refresh-only

       # Reinitialize with remote backend
      - name: Configure Remote Backend
        run: terraform init -reconfigure

      # Switch to OIDC-based credentials
      - name: Assume Terraform Execution Role
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::856265587682:role/TerraformCIExecutionRole
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-TerraformCI

      # Initialize with remote state
      - name: Terraform Init
        run: terraform init -reconfigure

      # Planning phase
      - name: Terraform Plan
        if: github.event_name == 'pull_request' || github.event_name == 'push'
        run: |
          terraform plan -no-color -input=false -out=tfplan
          terraform show -no-color tfplan > plan.txt

      # Check for changes
      - name: Check Changes
        id: check_changes
        run: |
          if grep -q "No changes." plan.txt; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      # Apply changes
      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/apply-nap' && steps.check_changes.outputs.has_changes == 'true'
        run: terraform apply -auto-approve tfplan

      # Final deployment credentials
      - name: Assume Deployment Role
        if: github.event_name == 'push' && github.ref == 'refs/heads/apply-nap'
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::856265587682:role/GitHubActionsTerraformRole
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-Deployment

  terraform_eks:
    name: "AWS EKS"
    runs-on: ubuntu-latest
    needs: terraform_infra
    defaults:
      run:
        working-directory: ./eks-cluster
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}  # Same role for all jobs
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        if: github.event_name == 'pull_request' || github.event_name == 'push'
        run: |
          terraform plan -no-color -input=false -out=tfplan
          terraform show -no-color tfplan > plan.txt

      - name: Check Changes
        id: check_changes
        run: |
          if grep -q "No changes." plan.txt; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/apply-nap' && steps.check_changes.outputs.has_changes == 'true'
        run: terraform apply -auto-approve tfplan

  terraform_nap:
    name: "NGINX App Protect"
    runs-on: ubuntu-latest
    needs: terraform_eks
    defaults:
      run:
        working-directory: ./nap
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}  # Same role for all jobs
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        if: github.event_name == 'pull_request' || github.event_name == 'push'
        run: |
          terraform plan -no-color -input=false -out=tfplan
          terraform show -no-color tfplan > plan.txt
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN}}
          NGINX_JWT: ${{ secrets.NGINX_JWT}}

      - name: Check Changes
        id: check_changes
        run: |
          if grep -q "No changes." plan.txt; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/apply-nap' && steps.check_changes.outputs.has_changes == 'true'
        run: terraform apply -auto-approve tfplan

  terraform_policy:
    name: "NGINX Policy"
    runs-on: ubuntu-latest
    needs: terraform_nap
    defaults:
      run:
        working-directory: ./policy
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}  # Same role for all jobs
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init

      - name: Install Docker and Docker Compose
        run: |
          sudo apt-get update -y
          sudo apt-get remove -y containerd containerd.io
          sudo apt-get install apt-transport-https ca-certificates curl software-properties-common -y
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          sudo apt-get update -y
          sudo apt-get install docker-ce docker-ce-cli containerd.io -y
          sudo service docker start
          sudo usermod -aG docker $USER

          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Create Certificates Directory for Docker
        run: |
          sudo mkdir -p /etc/docker/certs.d/private-registry.nginx.com

      - name: Create NGINX Repository Certificate for Docker
        run: echo "${{ secrets.NGINX_REPO_CRT }}" | sudo tee /etc/docker/certs.d/private-registry.nginx.com/client.cert > /dev/null

      - name: Create NGINX Repository Key for Docker
        run: echo "${{ secrets.NGINX_REPO_KEY }}" | sudo tee /etc/docker/certs.d/private-registry.nginx.com/client.key > /dev/null

      - name: Create Certificates Directory for NGINX
        run: |
          sudo mkdir -p /etc/ssl/nginx

      - name: Save NGINX Repository Certificate for NGINX
        run: echo "${{ secrets.NGINX_REPO_CRT }}" | sudo tee /etc/ssl/nginx/nginx-repo.crt > /dev/null

      - name: Save NGINX Repository Key for NGINX
        run: echo "${{ secrets.NGINX_REPO_KEY }}" | sudo tee /etc/ssl/nginx/nginx-repo.key > /dev/null

      - name: Build Docker Image
        run: |
          docker build --no-cache \
            --secret id=nginx-crt,src=/etc/ssl/nginx/nginx-repo.crt \
            --secret id=nginx-key,src=/etc/ssl/nginx/nginx-repo.key \
            -t waf-compiler-5.4.0:custom .

      - name: Ensure correct permissions for nap/charts directory
        run: |
          sudo chown -R $USER:$USER ${{ github.workspace }}    
          sudo chmod -R 777 ${{ github.workspace }}

      - name: Run Docker Container as Root
        run: |
          docker run --rm \
              -v ${{ github.workspace }}:/workspace \
                waf-compiler-5.4.0:custom \
              -p /workspace/policy/policy.json -o /workspace/policy/compiled_policy.tgz

      - name: Convert Compiled Policy to Base64
        run: |
          base64 ${{ github.workspace }}/policy/compiled_policy.tgz > ${{ github.workspace }}/policy/compiled_policy_base64.txt

      - name: Fix permissions for compiled files
        run: |
          sudo chown -R $USER:$USER ${{ github.workspace }}/policy
          chmod 644 ${{ github.workspace }}/policy/compiled_policy.tgz
          chmod 644 ${{ github.workspace }}/policy/compiled_policy_base64.txt
          ls -lh ${{ github.workspace }}/policy

      - name: Upload Compiled Policy as Artifact
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git add .
          git commit -m 'Committing Policy'
          git push

      - name: Copy Compiled Policy to NGINX Ingress Controller
        run: |
          NGINX_POD=$(kubectl get pods -n nginx-ingress -l app=nginx-ingress -o jsonpath='{.items[0].metadata.name}')
          kubectl cp ${{ github.workspace }}/policy/compiled_policy.tgz $NGINX_POD:/etc/app_protect/bundles/compiled_policy.tgz -n nginx-ingress -c nginx-plus-ingress

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: |
          terraform plan -no-color -input=false -out=tfplan
          terraform show -no-color tfplan > plan.txt

      - name: Check Changes
        id: check_changes
        run: |
          if grep -q "No changes." plan.txt; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/apply-nap' && steps.check_changes.outputs.has_changes == 'true'
        run: terraform apply -auto-approve tfplan

  terraform_arcadia:
    name: "Arcadia WebApp"
    runs-on: ubuntu-latest
    needs: terraform_policy
    defaults:
      run:
        working-directory: ./arcadia
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}  # Same role for all jobs
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan
        if: github.event_name == 'pull_request' || github.event_name == 'push'
        run: |
          terraform plan -no-color -input=false -out=tfplan
          terraform show -no-color tfplan > plan.txt

      - name: Check Changes
        id: check_changes
        run: |
          if grep -q "No changes." plan.txt; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/apply-nap' && steps.check_changes.outputs.has_changes == 'true'
        run: terraform apply -auto-approve tfplan